{
  "name": "chef-server",
  "version": "2.1.6",
  "description": "Installs and configures Chef Server",
  "long_description": "Chef Server\n===========\n\nThis cookbook configures a system to be a Chef Server. It will install\nthe appropriate platform-specific chef-server Omnibus package and\nperform the initial configuration of Chef Server.\n\n## Omnibus-based Chef-Server Overview\n\nTo understand how this cookbook works it is useful to understand how a\nChef Server instance installed via Omnibus packages behaves.\n\n### Know an Omnibus\n\nOmnibus allows you to build self-contained full-stack software\npackages. We use Omnibus to to distribute the Chef Server bundled with\nits dependencies such as Erlang, Ruby, PostgreSQL, RabbitMQ, and\nNginx. The result is a single package that can be installed on the\ntarget system and configured.\n\nOmnibus packages separate the installation step from the configuration\nstep. After an Omnibus package is installed, a configuration step must\nbe run before the installed system can be used. In particular, this\napproach makes handling upgrades easier.\n\n### Configuring Chef Server\n\nChef Server is configured through the\n`/etc/chef-server/chef-server.rb` file.  Standalone single-server\nconfigurations do not require custom configuration and can use the\ndefault values for everything.\n\nYou can read all about Chef Server's\n[configuration options](http://docs.opscode.com/config_rb_chef_server.html).\n\n### Applying configuration changes\n\nThe `chef-server-ctl reconfigure` command reads the\n`/etc/chef-server/chef-server.rb` file and applies the specified\nconfiguration to the system. Any time you make a change to your\nconfiguration, you need to run `chef-server-ctl reconfigure` to apply\nit.\n\n### chef-server-ctl\n\nOmnibus-based Chef Server installs have a command line utility,\n`chef-server-ctl`, which is used to operate the Chef Server. For\nexample, you can use `chef-server-ctl` to start and stop individual\nservices, reconfigure the entire server, and tail server log files.\n\n`chef-server-ctl` commands are documented below:\n\n    $ chef-server-ctl COMMAND\n\ncommand    | Action\n-----------|---------\nhelp       | Print a list of all the available chef-server-ctl commands.\nstatus     | Shows the status of the Chef Server services.\nstart      | Start all the enabled Chef Server services.\nstop       | Stop all the enabled Chef Server services.\nrestart    | Restart all the enabled chef server services.\ntail       | Follow the Chef Server logs for all services.\ntest       | Executes, chef-pedant, the integration test suite against the Chef Server installation. By default only a subset of tests are run, add the `--all` flag to run the full test suite.\n\nThe status, start, stop, restart, and tail commands can optionally be\napplied to a single service by adding the service name to the end of\nthe command line. For example, to get the status of the erchef\ncomponent of Chef Server, you can run:\n\n    chef-server-ctl status erchef\n\n\nREQUIREMENTS\n============\n\nChef 10\n\nPlatform\n--------\n\nChef Server Omnibus packages are available for the following platforms:\n\n* CentOS 5 64-bit\n* CentOS 6 64-bit\n* Ubuntu 10.04, 10.10 64-bit\n* Ubuntu 11.04, 11.10 64-bit\n* Ubuntu 12.04, 12.10 64-bit\n\nATTRIBUTES\n==========\n\nThe attributes used by this cookbook are under the `chef-server` name space.\n\nAttribute        | Description |Type | Default\n-----------------|-------------|-----|--------\napi_fqdn         | Fully qualified domain name that you want to use for accessing the Web UI and API. | String | node['fqdn']\nconfiguration    | Configuration values to pass down to the underlying server config file (i.e. `/etc/chef-server/chef-server.rb`). | Hash | Hash.new\npackage_file     | Location of the Omnibus package to install. This should not be set if you wish to pull the packages from the Omnitruck S3 bucket. | String | nil\npackage_checksum | SHA256 checksum of package referenced by `package_file`. | String | nil\nversion          | Chef Server version to install. This value is ignored if `package_file` is set. | String | :latest\nprereleases      | Indicates prerelease builds should be downloaded from Omnitruck. Prerelease builds come out in the weeks leading up to a major release. Prereleases offer an early preview of the next upcoming stable release and are intended for testers and advanced users. This value is ignored if `package_file` is set. | Boolean | false\nnightlies        | Indicates nightly builds should be downloaded from Omnitruck. Nightly builds of chef-server usually come out every night, but may be less frequent if there are no changes to the code, or the CI infrastructure is unable to create a build that day. The nightly builds are intended for testing only. This value is ignored if `package_file` is set. | Boolean | false\n\nRECIPES\n========\n\nThis section describes the recipes in the cookbook and how to use them\nin your environment.\n\ndefault\n-------\n\nThis recipe:\n\n* Installs the appropriate platform-specific chef-server Omnibus package.\n* Creates the initial `/etc/chef-server/chef-server.rb` file.\n* Performs initial system configuration via `chef-server-ctl reconfigure`.\n\nOmnibus package selection is done based on the following logic:\n\n1. If a value has been provided, the chef-server Omnibus package is\n   fetched from `node['chef-server']['package_file']`\n2. If `node['chef-server']['package_file']` is unset (ie nil or empty\n   string), the candidate package is retrieved from the Omnitruck REST\n   API based on `node['chef-server']['version']` AND the node\n   platform, platform_version and architecture. By default the latest package\n   is installed. If you would like to download pre-release or nightly builds\n   set appropriate attribute to `true`.\n\ndev\n---\n\nThis recipe converts a Chef Server installation into development mode\nfor easy hacking on the underlying server components. This recipe should\nnot be run on a production server.\n\nThis recipe will place checkouts for all of Chef Server's main\nsoftware components at `/opt/chef-server-dev/code`. These component\ncheckouts will also be symlinked into the underlying Chef Server\ninstallation.  Changes made to component code will be reflected in the\nrunning Chef Server instance (most often only after a restart of the\ngiven service).\n\nINSTALL METHODS\n===============\n\n## Bootstrap Chef (server) with Chef (solo)\n\nThe easiest way to get a Chef Server up and running is to install\nchef-solo (via the chef-client Omnibus packages) and bootstrap the\nsystem using this cookbook:\n\n    # install chef-solo\n    curl -L https://www.opscode.com/chef/install.sh | sudo bash\n    # create required bootstrap dirs/files\n    mkdir -p /var/chef/cache /var/chef/cookbooks/chef-server\n    # pull down this chef-server cookbook\n    wget -qO- https://github.com/opscode-cookbooks/chef-server/archive/master.tar.gz | tar xvzC /var/chef/cookbooks/chef-server --strip-components=1\n    # GO GO GO!!!\n    chef-solo -o 'recipe[chef-server::default]'\n\nIf you need more control over the final configuration of your Chef\nServer instance you can create a JSON attributes file and set\nunderlying configuration via the\n`node['chef-server']['configuration']` attribute. For example, you can\ndisable the webui with the following configuration:\n\n    echo '{\n      \"chef-server\": {\n        \"configuration\": {\n          \"chef_server_webui\": {\n            \"enable\": false\n          }\n        }\n      },\n      \"run_list\": [ \"recipe[chef-server::default]\" ]\n    }' > /tmp/no-webui.json\n\nYou would then pass this file to the initial chef-solo command:\n\n    chef-solo -j /tmp/no-webui.json\n\n## Demo Chef Server with Vagrant and Berkshelf\n\nWe <3 the wonderful open-source tools\n[Berkshelf](http://berkshelf.com/) and\n[Vagrant](http://vagrantup.com/). You can take Chef Server for a spin\nusing the Berksfile and Vagrantfile that ship alongside this cookbook.\nThe only requirements for standing up a virtualized Chef Server are:\n\n* VirtualBox - native packages exist for most platforms and can be downloaded\nfrom the [VirtualBox downloads page](https://www.virtualbox.org/wiki/Downloads).\n* Vagrant 1.3.2+ - native packages exist for most platforms and can be downloaded\nfrom the [Vagrant downloads page](http://downloads.vagrantup.com/).\n\nThe [vagrant-berkshelf](https://github.com/RiotGames/vagrant-berkshelf) and\n[vagrant-omnibus](https://github.com/schisamo/vagrant-omnibus) Vagrant plugins\nare also required and can be installed easily with the following commands:\n\n```shell\n$ vagrant plugin install vagrant-berkshelf\n$ vagrant plugin install vagrant-omnibus\n```\n\nOnce the pre-requisites are installed you can start the virtualized environment\nwith the following command:\n\n```shell\n$ vagrant up\n```\n\nAlthough things have only been tested with Vagrant's `virtualbox` provider\neverything should work with other providers like `vmware_fusion` or `ec2`.\n\nYou can easily SSH into the running VM using the `vagrant ssh` command.\nThe VM can easily be stopped and deleted with the `vagrant destroy`\ncommand. Please see the official\n[Vagrant documentation](http://vagrantup.com/v1/docs/commands.html) for a more\nin depth explanation of available commands.\n\nThe running Chef-Server components are accessible from the host machine\nusing the following URLs:\n\n* Web UI: https://33.33.33.50/ (Note: Attempts to hit via straight http will be\nredirected to the Vagrant guest's internal hostname)\n* Version Manifest: https://33.33.33.50/version\n* Chef Server API (routing requires `X-OPS-USERID` HTTP header being properly\nset): https://33.33.33.50/\n\n*Note: It can be helpful to use the host workstation's /etc/hosts file to map\n33.33.33.50 to chef-server-berkshelf.*\n\n## Contribute to and Hack on Chef Server (including Erchef)\n\nThis cookbook ships with a recipe named `dev` that will take any Chef\nServer instance and flip it into development mode. If you want to use\nthe Vagrant-based environment referenced above, edit the `chef.run_list`\nvalue in the `Vagrantfile` to include an additional\n`recipe[chef-server::dev]` run list item.\n\n\nLICENSE AND AUTHORS\n===================\n\n* Author: Seth Chisamore <schisamo@opscode.com>\n\nCopyright 2012, Opscode, Inc\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\n",
  "maintainer": "Opscode, Inc.",
  "maintainer_email": "cookbooks@opscode.com",
  "license": "Apache 2.0",
  "platforms": {
    "centos": ">= 0.0.0",
    "amazon": ">= 0.0.0",
    "ubuntu": ">= 0.0.0"
  },
  "dependencies": {
  },
  "recommendations": {
  },
  "suggestions": {
  },
  "conflicting": {
  },
  "providing": {
  },
  "replacing": {
  },
  "attributes": {
  },
  "groupings": {
  },
  "recipes": {
  }
}