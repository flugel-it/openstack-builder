{%- set vncservner_proxyclient_address = "172.21.22.10" %}
{%- set use_ironic = True %}
[DEFAULT]
verbose = False
debug = False

dhcpbridge_flagfile=/etc/nova/nova.conf
dhcpbridge=/usr/bin/nova-dhcpbridge
logdir=/var/log/nova
state_path=/var/lib/nova
lock_path=/var/lock/nova
force_dhcp_release=True
libvirt_use_virtio_for_bridges=True
verbose=True
ec2_private_dns_show_ip=True
api_paste_config=/etc/nova/api-paste.ini
enabled_apis=ec2,osapi_compute,metadata

rcp_backend = rabbit
rabbit_host = controller
rabbit_port = 5672
rabbit_use_ssl = false
rabbit_userid = {{ pillar['RABBIT_USER'] }}
rabbit_password = {{ pillar['RABBIT_PASS'] }}
#rabbit_virtual_host = /
#rabbit_notification_exchange = nova
#rabbit_notification_topic = notifications
rabbit_durable_queues = False

auth_strategy = keystone

my_ip = {{ grains["fqdn_ip4"][0] }}

vncserver_listen = {{ grains["fqdn_ip4"][0] }}
vncserver_proxyclient_address = {{ grains["fqdn_ip4"][0] }}

{% if pillar['networking_service'] == 'nova-network' and 'controller' in grains.get("roles", [])%}
network_api_class = nova.network.api.API
security_group_api = nova
{% endif %}

{% if pillar['networking_service'] == 'nova-network' %}
network_api_class = nova.network.api.API
security_group_api = nova
network_manager = nova.network.manager.FlatDHCPManager
network_size = 254
allow_same_net_traffic = False
multi_host = True
send_arp_for_ha = True
share_dhcp_address = True
force_dhcp_release = True
flat_network_bridge = br100
flat_interface = eth0
public_interface = eth0
{% endif %}

{% if "nova-compute" in grains.get("roles", []) and use_ironic %}
# Driver to use for controlling virtualization. Options
# include: libvirt.LibvirtDriver, xenapi.XenAPIDriver,
# fake.FakeDriver, baremetal.BareMetalDriver,
# vmwareapi.VMwareESXDriver, vmwareapi.VMwareVCDriver (string
# value)
#compute_driver=<None>
compute_driver=nova.virt.ironic.IronicDriver

# Firewall driver (defaults to hypervisor specific iptables
# driver) (string value)
#firewall_driver=<None>
firewall_driver=nova.virt.firewall.NoopFirewallDriver

# The scheduler host manager class to use (string value)
#scheduler_host_manager=nova.scheduler.host_manager.HostManager
scheduler_host_manager=nova.scheduler.ironic_host_manager.IronicHostManager

# Virtual ram to physical ram allocation ratio which affects
# all ram filters. This configuration specifies a global ratio
# for RamFilter. For AggregateRamFilter, it will fall back to
# this configuration value if no per-aggregate setting found.
# (floating point value)
#ram_allocation_ratio=1.5
ram_allocation_ratio=1.0

# Amount of disk in MB to reserve for the host (integer value)
#reserved_host_disk_mb=0
reserved_host_memory_mb=0

# Full class name for the Manager for compute (string value)
#compute_manager=nova.compute.manager.ComputeManager
compute_manager=ironic.nova.compute.manager.ClusteredComputeManager
{% endif %}

{% if "nova-compute" in grains.get("roles", []) and not use_ironic %}
compute_driver=libvirt.LibvirtDriver
firewall_driver = nova.virt.libvirt.firewall.IptablesFirewallDriver

{% endif %}

{% if "nova-compute" in grains.get("roles", []) %}
vnc_enabled = True
vncserver_listen = 0.0.0.0
vncserver_proxyclient_address = {{ vncserver_proxyclient_address }}
novncproxy_base_url = http://controller:6080/vnc_auto.html
{% endif %}

[glance]
host = controller

[database]
connection = mysql://{{ pillar['NOVA_DBUSER'] }}:{{ pillar['NOVA_DBPASS'] }}@controller/nova

[keystone_authtoken]
auth_uri = http://controller:5000/v2.0
identity_uri = http://controller:35357
admin_tenant_name = service
admin_user = nova
admin_password = {{ pillar['NOVA_PASS'] }}
revocation_cache_time = 10

#[libvirt]
#images_type=rbd
#images_rbd_pool=openstack
#images_rbd_ceph_conf=/etc/ceph/ceph.conf
#rbd_user=admin
#rbd_secret_uuid=457eb676-33da-42ec-9a8c-9293d545c337

{% if "nova-compute" in grains.get("roles", []) and use_ironic %}
[ironic]

# Ironic keystone admin name
admin_username=ironic

#Ironic keystone admin password.
admin_password={{ pillar['IRONIC_PASSWORD'] }}

# keystone API endpoint
admin_url=http://controller:35357/v2.0

# Ironic keystone tenant name.
admin_tenant_name=service

# URL for Ironic API endpoint.
api_endpoint=http://{{ grains["host"] }}:6385/v1
{% endif %}
